[
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Interactive Statistics: Exploring Data with Shiny Applications",
    "section": "Welcome",
    "text": "Welcome\nEmbark on a dynamic and engaging journey through the world of statistics with our innovative textbook, “Interactive Statistics: Exploring Data with Shiny Applications.” This book is designed to allow students to explore statistical ideas by leveraging the power of Shiny applications.\nSample shinylive app inside the textbook.\n#| standalone: true\n#| viewerHeight: 600\n# Load the shiny and ggplot2 packages\nlibrary(shiny)\nlibrary(ggplot2)\n\n# Define the UI\nui &lt;- fluidPage(\n  titlePanel(\"Interactive Graph with Linear Regression\"),\n  \n  fluidRow(\n    column(\n      # Two sliders to adjust the x and y axis ranges\n      sliderInput(\"xrange\", \"X-axis range\", min = -10, max = 10, value = c(-5, 5)),\n      sliderInput(\"yrange\", \"Y-axis range\", min = -10, max = 10, value = c(-5, 5)),\n      # A button to reset the data\n      actionButton(\"reset\", \"Reset Data\"),\n      width = 3\n    ),\n    column(\n      # A plot output to display the graph\n      plotOutput(\"plot\", click = \"plot_click\"),\n      width = 6),\n    column(\n      # A table output to display the statistics\n      tableOutput(\"stats\"),\n      # A text output to display the model equation\n      textOutput(\"model\"), width = 3)\n  )\n)\n\n# Define the server\nserver &lt;- function(input, output, session) {\n  \n  # A reactive value to store the data frame\n  values &lt;- reactiveValues(data = NULL)\n  \n  empty_dataframe &lt;- function() { data.frame(x = numeric(), y = numeric()) }\n  # Initialize an empty data frame \n  observe({\n    values$data &lt;- empty_dataframe()\n  })\n  \n  # Update the data frame when the user clicks on the plot\n  observeEvent(input$plot_click, {\n    # Get the coordinates of the click\n    x &lt;- input$plot_click$x\n    y &lt;- input$plot_click$y\n    # Add a new row to the data frame\n    values$data &lt;- rbind(values$data, data.frame(x = x, y = y))\n  })\n  \n  # Reset the data frame when the user clicks on the reset button\n  observeEvent(input$reset, {\n    values$data &lt;- empty_dataframe()\n  })\n  \n  # Render the plot output\n  output$plot &lt;- renderPlot({\n    # Create a ggplot object with the data\n    p &lt;- ggplot(values$data, aes(x = x, y = y)) +\n      geom_point(size = 3) +\n      xlim(input$xrange[1], input$xrange[2]) +\n      ylim(input$yrange[1], input$yrange[2]) +\n      labs(x = \"X\", y = \"Y\")\n    # If there is more than one point, add a linear regression line\n    if (nrow(values$data) &gt; 1) {\n      p &lt;- p + geom_smooth(method = \"lm\", se = FALSE)\n    }\n    # Return the plot object\n    p\n  })\n  \n  # Render the table output\n  output$stats &lt;- renderTable({\n    # If there is more than one point, calculate the statistics\n    if (nrow(values$data) &gt; 1) {\n      # Fit a linear model\n      model &lt;- lm(y ~ x, data = values$data)\n      # Get the correlation coefficient\n      rho &lt;- cor(values$data$x, values$data$y)\n      # Get the sum of squared residuals\n      ssr &lt;- sum(residuals(model)^2)\n      # Get the number of points\n      n &lt;- nrow(values$data)\n      # Get the mean of x and y\n      xbar &lt;- mean(values$data$x)\n      ybar &lt;- mean(values$data$y)\n      # Get the covariance between x and y\n      covxy &lt;- cov(values$data$x, values$data$y)\n      # Create a data frame with the statistics\n      stats &lt;- data.frame(\n        Statistic = c(\"Number of Points\", \"Mean of X\", \"Mean of Y\", \"Covariance between X and Y\", \"Correlation\", \"Sum of Squared Residuals\"),\n        Value = c(n, xbar, ybar, covxy, rho, ssr)\n      )\n      # Return the data frame\n      stats\n    } else {\n      # Return an empty data frame\n      data.frame()\n    }\n  })\n  \n  # Render the text output\n  output$model &lt;- renderText({\n    # If there is more than one point, display the model equation\n    if (nrow(values$data) &gt; 1) {\n      # Fit a linear model\n      model &lt;- lm(y ~ x, data = values$data)\n      # Get the coefficients\n      a &lt;- coef(model)[1]\n      b &lt;- coef(model)[2]\n      # Get the R-squared\n      r2 &lt;- summary(model)$r.squared\n      # Format the equation\n      equation &lt;- paste0(\"y = \", round(a, 2), \" + \", round(b, 2), \"x\")\n      # Format the R-squared\n      rsquared &lt;- paste0(\"R^2 = \", round(r2, 2))\n      # Return the text\n      paste0(\"Model Equation:\\n\", equation, \"\\n\\n\", \"Coefficient of Determination:\\n\", rsquared)\n    } else {\n      # Return an empty text\n      \"\"\n    }\n  })\n}\n\n# Run the app\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "part-1-into-the-data-verse.html",
    "href": "part-1-into-the-data-verse.html",
    "title": "Part 1: Into the Dataverse",
    "section": "",
    "text": "Within this portion, we’ll explore different properties of data."
  },
  {
    "objectID": "hello-data-world-example.html",
    "href": "hello-data-world-example.html",
    "title": "1  The Hello Data World Example",
    "section": "",
    "text": "When we think about data, we’re really starting to have a conversation about anything that has been written down. In the words of Mythbusters:\n\nRemember kids, the only difference between screwing. around and science is writing it down\n– Adam Savage (talking with the armor Alec Jason)\n\nIn this case, we can have a shiny app that allows for 1 to 3:\n#| standalone: true\n#| viewerHeight: 600\n# Required packages ----\nlibrary(shiny)\nlibrary(DT)\nlibrary(dplyr)\n\n# Required for allowing seamless passing of NA values on new row/column creation.\n# Details: https://github.com/rstudio/DT/issues/496\noptions(\"DT.TOJSON_ARGS\" = list(na = \"string\"))\n\n# Define UI for app that allows data entry and summary ----\nui &lt;- fluidPage(\n  # App title ----\n  titlePanel(\"Datatizer\"),\n  \n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n      # Input: Button to toggle between data entry, summary, and plot views ----\n      selectInput(\"viewSelector\", \"Select View:\",\n                  choices = c(\"Data Entry\", \"Summary\", \"Plot\"),\n                  selected = \"Data Entry\"),\n      br(),\n      downloadButton(\"downloadData\", \"Download Data\")\n    ),\n    \n    # Main panel for displaying outputs ----\n    mainPanel(\n      # Output: Conditional panel that shows either data entry, summary, or plot ----\n      conditionalPanel(\n        condition = \"input.viewSelector == 'Data Entry'\", \n        h3(\"Data Entry\"),\n        DTOutput(outputId = \"dataTable\"),\n        fluidRow(\n          align = \"right\",\n          br(),\n          column(\n            6,\n            actionButton(\n              inputId = \"addRow\",\n              label = \"Add new row\"\n            )\n          ),\n          column(\n            2,\n            actionButton(\n              inputId = \"addColumn\",\n              label = \"Add new column\"\n            )\n          )\n        )\n      ),\n      conditionalPanel(\n        condition = \"input.viewSelector == 'Summary'\", \n        h3(\"Summary\"),\n        tableOutput(outputId = \"dataSummary\")\n      ),\n      conditionalPanel(\n        condition = \"input.viewSelector == 'Plot'\", \n        h3(\"Scatterplot Matrix\"),\n        plotOutput(outputId = \"scatterplot\")\n      )\n    )\n  )\n)\n\n# Define server logic required to handle data entry, summary, and plotting ----\nserver &lt;- function(input, output, session) {\n  \n  # Reactive value to store the data ----\n  entry_data &lt;- reactiveVal(data.frame(x = NA_real_, y = NA_real_))\n  \n  # Reactive expression to save the data to disk on write ----\n  saveData &lt;- reactive({\n    write.csv(entry_data(), paste0(\"shiny-data-entry-backup-\", Sys.Date(), \".csv\"), row.names = FALSE)\n  })\n  \n  # Observe the data and save it when it changes ----\n  observeEvent(entry_data(), {\n    saveData()\n  })\n  \n  # Render the data table with editable cells ----\n  output$dataTable &lt;- renderDT({\n    datatable(entry_data(), editable = TRUE, rownames = FALSE)\n  })\n  \n  # Update the data when a cell is edited ----\n  observeEvent(input$dataTable_cell_edit, {\n    info &lt;- input$dataTable_cell_edit\n    \n    # Suppress immediate updates\n    new_data &lt;- isolate(entry_data())\n    \n    i &lt;- info$row     # DT returns 1-based index for row\n    j &lt;- info$col + 1 # DT returns 0-based index for column\n    v &lt;- info$value\n    \n    # Update data entry with new value\n    new_data[i, j] &lt;- v\n    \n    # Add a new row when return is pressed on the last cell ----\n    if (i == nrow(new_data) && j == ncol(new_data)) {\n      new_data = rbind(new_data, rep(NA, ncol(new_data))) # add a new row with NA values\n    }\n    \n    entry_data(new_data)\n  })\n  \n  # Handle dynamic expansion of observations ----\n  observeEvent(input$addRow, {\n    # Suppress immediate updates\n    new_data &lt;- isolate(entry_data())\n    \n    # Add a new row with NA values\n    new_data &lt;- rbind(new_data, rep(NA, ncol(new_data)))\n    \n    # Re-build the reactive value\n    entry_data(new_data)\n  })\n  \n  # Handle dynamic expansion of variables ----\n  observeEvent(input$addColumn, {\n    # Suppress immediate updates\n    new_data &lt;- isolate(entry_data())\n    \n    # Add a new column with NA values\n    new_data[paste0(\"col\", ncol(new_data) + 1)] &lt;- rep(NA, nrow(new_data))\n    \n    # Re-build the reactive value\n    entry_data(new_data)\n  })\n  \n  # Render the summary table ----\n  output$dataSummary &lt;- renderTable({\n    # Pluck all numeric values and perform summary \n    do.call(cbind, lapply(Filter(is.numeric, entry_data()), summary))\n  }, rownames = TRUE)\n  \n  # Output to display scatterplot matrix ----\n  output$scatterplot &lt;- renderPlot({\n    # Pluck all numeric values and generate a scatterplot matrix \n    pairs(Filter(is.numeric, entry_data()))\n  })\n  \n  # Download button to export data ----\n  output$downloadData &lt;- downloadHandler(\n    filename = function() {\n      paste0(\"shiny-entry-data-\", Sys.Date(), \".csv\")\n    },\n    content = function(file) {\n      write.csv(x = entry_data(), file = file, row.names = FALSE)\n    }\n  )\n}\n\n# Create Shiny app ----\nshinyApp(ui, server)"
  }
]