[
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Interactive Statistics: Exploring Data with Shiny Applications",
    "section": "Welcome",
    "text": "Welcome\nWelcome splash page!\nSample shinylive app inside the textbook.\n#| standalone: true\n# Load the shiny and ggplot2 packages\nlibrary(shiny)\nlibrary(ggplot2)\n\n# Define the UI\nui &lt;- fluidPage(\n  titlePanel(\"Interactive Graph with Linear Regression\"),\n  \n  fluidRow(\n    column(\n      # Two sliders to adjust the x and y axis ranges\n      sliderInput(\"xrange\", \"X-axis range\", min = -10, max = 10, value = c(-5, 5)),\n      sliderInput(\"yrange\", \"Y-axis range\", min = -10, max = 10, value = c(-5, 5)),\n      # A button to reset the data\n      actionButton(\"reset\", \"Reset Data\"),\n      width = 3\n    ),\n    column(\n      # A plot output to display the graph\n      plotOutput(\"plot\", click = \"plot_click\"),\n      width = 6),\n    column(\n      # A table output to display the statistics\n      tableOutput(\"stats\"),\n      # A text output to display the model equation\n      textOutput(\"model\"), width = 3)\n  )\n)\n\n# Define the server\nserver &lt;- function(input, output, session) {\n  \n  # A reactive value to store the data frame\n  values &lt;- reactiveValues(data = NULL)\n  \n  empty_dataframe &lt;- function() { data.frame(x = numeric(), y = numeric()) }\n  # Initialize an empty data frame \n  observe({\n    values$data &lt;- empty_dataframe()\n  })\n  \n  # Update the data frame when the user clicks on the plot\n  observeEvent(input$plot_click, {\n    # Get the coordinates of the click\n    x &lt;- input$plot_click$x\n    y &lt;- input$plot_click$y\n    # Add a new row to the data frame\n    values$data &lt;- rbind(values$data, data.frame(x = x, y = y))\n  })\n  \n  # Reset the data frame when the user clicks on the reset button\n  observeEvent(input$reset, {\n    values$data &lt;- empty_dataframe()\n  })\n  \n  # Render the plot output\n  output$plot &lt;- renderPlot({\n    # Create a ggplot object with the data\n    p &lt;- ggplot(values$data, aes(x = x, y = y)) +\n      geom_point(size = 3) +\n      xlim(input$xrange[1], input$xrange[2]) +\n      ylim(input$yrange[1], input$yrange[2]) +\n      labs(x = \"X\", y = \"Y\")\n    # If there is more than one point, add a linear regression line\n    if (nrow(values$data) &gt; 1) {\n      p &lt;- p + geom_smooth(method = \"lm\", se = FALSE)\n    }\n    # Return the plot object\n    p\n  })\n  \n  # Render the table output\n  output$stats &lt;- renderTable({\n    # If there is more than one point, calculate the statistics\n    if (nrow(values$data) &gt; 1) {\n      # Fit a linear model\n      model &lt;- lm(y ~ x, data = values$data)\n      # Get the correlation coefficient\n      rho &lt;- cor(values$data$x, values$data$y)\n      # Get the sum of squared residuals\n      ssr &lt;- sum(residuals(model)^2)\n      # Get the number of points\n      n &lt;- nrow(values$data)\n      # Get the mean of x and y\n      xbar &lt;- mean(values$data$x)\n      ybar &lt;- mean(values$data$y)\n      # Get the covariance between x and y\n      covxy &lt;- cov(values$data$x, values$data$y)\n      # Create a data frame with the statistics\n      stats &lt;- data.frame(\n        Statistic = c(\"Number of Points\", \"Mean of X\", \"Mean of Y\", \"Covariance between X and Y\", \"Correlation\", \"Sum of Squared Residuals\"),\n        Value = c(n, xbar, ybar, covxy, rho, ssr)\n      )\n      # Return the data frame\n      stats\n    } else {\n      # Return an empty data frame\n      data.frame()\n    }\n  })\n  \n  # Render the text output\n  output$model &lt;- renderText({\n    # If there is more than one point, display the model equation\n    if (nrow(values$data) &gt; 1) {\n      # Fit a linear model\n      model &lt;- lm(y ~ x, data = values$data)\n      # Get the coefficients\n      a &lt;- coef(model)[1]\n      b &lt;- coef(model)[2]\n      # Get the R-squared\n      r2 &lt;- summary(model)$r.squared\n      # Format the equation\n      equation &lt;- paste0(\"y = \", round(a, 2), \" + \", round(b, 2), \"x\")\n      # Format the R-squared\n      rsquared &lt;- paste0(\"R^2 = \", round(r2, 2))\n      # Return the text\n      paste0(\"Model Equation:\\n\", equation, \"\\n\\n\", \"Coefficient of Determination:\\n\", rsquared)\n    } else {\n      # Return an empty text\n      \"\"\n    }\n  })\n}\n\n# Run the app\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "my-first-book.html",
    "href": "my-first-book.html",
    "title": "Part 1: Write the book",
    "section": "",
    "text": "Sample additional page"
  },
  {
    "objectID": "hello-world.html",
    "href": "hello-world.html",
    "title": "1  The Hello World Example",
    "section": "",
    "text": "Hello Quarto World!"
  },
  {
    "objectID": "appendix-notes.html",
    "href": "appendix-notes.html",
    "title": "Appendix A — Additional Notes",
    "section": "",
    "text": "Sample appendix"
  }
]